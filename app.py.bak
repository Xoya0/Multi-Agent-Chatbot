import os
import uuid
import logging
from datetime import datetime
from typing import Optional, Dict, Any, Tuple
from flask import Flask, request, jsonify, render_template, abort
from flask_cors import CORS
from dotenv import load_dotenv
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
from torch.cuda.amp import autocast
from functools import wraps

# Import custom modules
from models import init_db, ChatSession, SessionInfo
from agents import agent_manager
from session_manager import init_session_manager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
CORS(app)
app.secret_key = os.getenv('SECRET_KEY', 'dev_secret_key')

def handle_exceptions(func):
    """Decorator for handling exceptions in route handlers."""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError as e:
            logger.warning(f'Validation error in {func.__name__}: {str(e)}')
            return jsonify({'error': str(e)}), 400
        except Exception as e:
            logger.error(f'Error in {func.__name__}: {str(e)}')
            return jsonify({'error': 'An unexpected error occurred'}), 500
    return wrapper

class ModelManager:
    """Manages the AI model initialization and inference with enhanced features."""
    def __init__(self):
        self.model_name = os.getenv('MODEL_NAME', 'gpt2')
        self.model = None
        self.tokenizer = None
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.max_retries = 3
        self.initialize_model()

    def initialize_model(self) -> None:
        """Initialize the model and tokenizer with enhanced error handling."""
        try:
            self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)
            if self.tokenizer.pad_token is None:
                self.tokenizer.pad_token = self.tokenizer.eos_token

            self.model = AutoModelForCausalLM.from_pretrained(
                self.model_name,
                low_cpu_mem_usage=True,
                device_map='auto',
                torch_dtype=torch.float32,
                use_safetensors=True
            )
            self.model.eval()
            logger.info(f'Model initialized successfully on {self.device}')
        except Exception as e:
            logger.error(f'Error initializing model: {str(e)}')
            raise

    def generate_response(
        self,
        input_text: str,
        temperature: float = 0.85,
        top_p: float = 0.7,
        max_length: int = 150,
        retry_count: int = 0
    ) -> str:
        """Generate response with enhanced error handling and retry mechanism."""
        try:
            inputs = self.tokenizer.encode(
                input_text,
                return_tensors='pt',
                max_length=512,
                truncation=True,
                padding=True
            ).to(self.device)

            with torch.no_grad(), autocast(enabled=True):
                # Prepend instruction for concise, emotional responses
            input_text = "Respond concisely in a warm, emotional tone with a maximum of two short sentences.\n" + input_text
            
            outputs = self.model.generate(
                    inputs,
                    max_length=max_length,
                    num_return_sequences=1,
                    no_repeat_ngram_size=2,
                    temperature=temperature,
                    top_k=40,
                    top_p=top_p,
                    pad_token_id=self.tokenizer.eos_token_id,
                    repetition_penalty=1.3,
                    do_sample=True,
                    early_stopping=True,
                    length_penalty=0.8,  # Encourage shorter responses
                    use_cache=True
                )

            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            return self._clean_response(response)
        except Exception as e:
            if retry_count < self.max_retries:
                logger.warning(f'Retrying response generation (attempt {retry_count + 1})')
                return self.generate_response(input_text, temperature, top_p, max_length, retry_count + 1)
            logger.error(f'Error generating response: {str(e)}')
            raise

    def _clean_response(self, response: str) -> str:
        """Clean and format the model's response with enhanced processing."""
        response = response.split('Assistant (respond naturally and engagingly):')[-1].strip()
        response = response.replace('Assistant:', '').replace('User:', '').strip()
        return ' '.join(response.split())  # Normalize whitespace

# Initialize components with enhanced error handling
try:
    model_manager = ModelManager()
    SessionLocal = init_db(os.getenv('DATABASE_URL', 'sqlite:///chat_history.db'))
    session_manager = init_session_manager(SessionLocal)
    logger.info('Application components initialized successfully')
except Exception as e:
    logger.critical(f'Failed to initialize application components: {str(e)}')
    raise

def get_ai_response(message: str, session_id: str, agent_id: Optional[str] = None) -> Tuple[str, Dict[str, Any]]:
    """Generate an AI response with enhanced emotional context and personality."""
    try:
        session_history = session_manager.get_session_history(session_id, limit=5)
        agent_profile = agent_manager.get_profile(agent_id) if agent_id else agent_manager.get_default_profile()
        
        def _analyze_emotional_context(messages):
            """Analyze emotional context from recent messages to maintain conversation tone."""
            if not messages:
                return None
            
            # Extract emotional indicators from recent messages
            emotional_indicators = {
                'positive': ['happy', 'excited', 'love', 'great', 'wonderful'],
                'negative': ['sad', 'angry', 'upset', 'worried', 'sorry'],
                'neutral': ['think', 'believe', 'understand', 'know', 'consider']
            }
            
            context = {'tone': 'neutral', 'intensity': 0.5}
            recent_messages = messages[-3:]  # Focus on last 3 messages
            
            for msg in recent_messages:
                content = msg.content.lower()
                for tone, indicators in emotional_indicators.items():
                    if any(indicator in content for indicator in indicators):
                        context['tone'] = tone
                        context['intensity'] = 0.8 if msg == recent_messages[-1] else 0.6
                        break
            
            return context
        
        # Analyze emotional context from recent messages
        emotional_context = _analyze_emotional_context(session_history)
        
        # Build conversation context with emotional awareness
        input_text = 'Conversation:\n'
        if emotional_context:
            input_text += f'Current emotional context: {emotional_context["tone"]} with {emotional_context["intensity"]} intensity\n'
        for msg in (session_history or []):
            input_text += f'{msg.role.capitalize()}: {msg.content}\n'
        input_text += f'Human: {message}\nAssistant (respond naturally and engagingly):'

        start_time = datetime.now()
        response = model_manager.generate_response(
            input_text,
            temperature=agent_profile.behavior_params.get('temperature', 0.9),
            top_p=agent_profile.behavior_params.get('top_p', 0.92)
        )
        response_time = (datetime.now() - start_time).total_seconds()

        metadata = {
            'response_time': response_time,
            'agent_profile': agent_profile.id,
            'timestamp': datetime.now().isoformat()
        }

        session_manager.add_message(session_id, 'user', message)
        session_manager.add_message(session_id, 'assistant', response, metadata=metadata)
        session_manager.track_metrics(session_id, response_time=response_time)

        return response, metadata
    except Exception as e:
        logger.error(f'Error in get_ai_response: {str(e)}')
        raise

@app.errorhandler(Exception)
def handle_error(error):
    """Enhanced global error handler with detailed logging."""
    error_id = str(uuid.uuid4())
    logger.error(f'Unhandled error {error_id}: {str(error)}', exc_info=True)
    return jsonify({
        'error': 'An unexpected error occurred',
        'error_id': error_id
    }), 500

@app.route('/agents')
@handle_exceptions
def get_agents_list():
    """Get all available agent profiles with enhanced response."""
    agents = [{
        'id': profile.id,
        'name': profile.name,
        'description': profile.description,
        'traits': profile.traits,
        'avatar': profile.avatar,
        'capabilities': profile.behavior_params
    } for profile in agent_manager.get_all_profiles()]
    return jsonify({'agents': agents, 'count': len(agents)})

@app.route('/')
def index():
    """Render the main chat interface."""
    return render_template('index.html')

@app.route('/analytics/session/<session_id>', methods=['GET'])
@handle_exceptions
def get_session_analytics(session_id):
    """Get comprehensive analytics for a specific chat session."""
    analytics = session_manager.get_session_analytics(session_id)
    if not analytics:
        abort(404, description='Session not found')
    return jsonify(analytics)

@app.route('/analytics/global', methods=['GET'])
@handle_exceptions
def get_global_analytics():
    """Get enhanced global analytics across all sessions."""
    return jsonify(session_manager.get_global_analytics())

@app.route('/feedback', methods=['POST'])
@handle_exceptions
def submit_feedback():
    """Submit user feedback with enhanced validation."""
    data = request.json
    session_id = data.get('session_id')
    rating = data.get('rating')
    feedback_text = data.get('feedback_text')
    
    if not session_id or not isinstance(rating, (int, float)) or not (1 <= rating <= 5):
        raise ValueError('Invalid feedback data')
        
    metadata = {
        'feedback_text': feedback_text,
        'timestamp': datetime.now().isoformat()
    }
    
    session_manager.track_metrics(session_id, user_rating=rating)
    return jsonify({'message': 'Feedback submitted successfully', 'metadata': metadata})

@app.route('/chat', methods=['POST'])
@handle_exceptions
def chat():
    """Handle chat messages with enhanced features and response metadata."""
    data = request.json
    message = data.get('message')
    agent_id = data.get('agent_id')
    session_id = data.get('session_id')
    user_id = data.get('user_id', 'anonymous')

    if not message:
        raise ValueError('Message is required')

    if not session_id:
        session_id = str(uuid.uuid4())
        if not agent_id:
            agents = agent_manager.get_all_profiles()
            if not agents:
                raise ValueError('No agents available')
            agent_id = agents[0].id

        if not session_manager.create_session(session_id, agent_id, user_id):
            raise ValueError('Failed to create session')
    else:
        session_state = session_manager.get_session(session_id)
        if not session_state:
            raise ValueError('Invalid session ID')
        agent_id = agent_id or session_state.agent_id

    response, metadata = get_ai_response(message, session_id, agent_id)

    return jsonify({
        'response': response,
        'session_id': session_id,
        'metadata': metadata
    })

@app.route('/session', methods=['GET', 'POST', 'DELETE'])
@handle_exceptions
def manage_session():
    """Manage chat sessions with enhanced features and validation."""
    try:
        if request.method == 'POST':
            data = request.json or {}
            agent_id = data.get('agent_id')
            user_id = data.get('user_id', 'anonymous')
            metadata = data.get('metadata', {})

            if not agent_id:
                return jsonify({'error': 'Agent ID is required'}), 400

            session_id = str(uuid.uuid4())
            session_state = session_manager.create_session(session_id, agent_id, user_id, metadata)
            if not session_state:
                return jsonify({'error': 'Failed to create session'}), 500

            agent_profile = agent_manager.get_profile(agent_id)
            if not agent_profile:
                return jsonify({'error': 'Agent not found'}), 404

            return jsonify({
                'session_id': session_id,
                'agent': {
                    'id': agent_profile.id,
                    'name': agent_profile.name,
                    'avatar': agent_profile.avatar
                },
                'created_at': session_state.created_at.isoformat(),
                'metadata': metadata
            })

        elif request.method == 'DELETE':
            session_id = request.args.get('session_id')
            if not session_id:
                return jsonify({'error': 'Session ID is required'}), 400

            if not session_manager.delete_session(session_id):
                return jsonify({'error': 'Session not found'}), 404

            return jsonify({'message': 'Session deleted successfully'})

        else:  # GET
            session_id = request.args.get('session_id')
            if not session_id:
                return jsonify({'error': 'Session ID is required'}), 400

            session_state = session_manager.get_session(session_id)
            if not session_state:
                return jsonify({'error': 'Session not found'}), 404

            messages = session_manager.get_session_history(session_id)
            agent_profile = agent_manager.get_profile(session_state.agent_id)

            return jsonify({
                'session_id': session_id,
                'agent': {
                    'id': agent_profile.id,
                    'name': agent_profile.name,
                    'avatar': agent_profile.avatar
                } if agent_profile else None,
                'created_at': session_state.created_at.isoformat(),
                'last_active': session_state.last_active.isoformat(),
                'metadata': session_state.metadata,
                'history': [{
                    'role': msg.role,
                    'content': msg.content,
                    'timestamp': msg.timestamp.isoformat(),
                    'metadata': msg.metadata
                } for msg in messages]
            })
    except Exception as e:
        logger.error(f'Error in manage_session: {str(e)}')
        return jsonify({'error': 'An unexpected error occurred'}), 500

@app.route('/sessions', methods=['GET'])
@handle_exceptions
def get_user_sessions():
    """Get all sessions for a user with enhanced filtering and metadata."""
    user_id = request.args.get('user_id', 'anonymous')
    active_only = request.args.get('active_only', '').lower() == 'true'
    
    sessions = session_manager.get_user_sessions(user_id, active_only=active_only)
    
    session_data = []
    for session in sessions:
        agent_profile = agent_manager.get_profile(session.agent_id)
        last_message = None
        if session.messages:
            content = session.messages[-1].content
            last_message = {
                'content': f'{content[:50]}...' if len(content) > 50 else content,
                'timestamp': session.messages[-1].timestamp.isoformat(),
                'metadata': session.messages[-1].metadata
            }

        session_data.append({
            'session_id': session.session_id,
            'agent_id': session.agent_id,
            'agent_name': agent_profile.name if agent_profile else 'Unknown Agent',
            'agent_avatar': agent_profile.avatar if agent_profile else '❓',
            'created_at': session.created_at.isoformat(),
            'last_active': session.last_active.isoformat(),
            'last_message': last_message,
            'metadata': session.metadata
        })

    return jsonify({
        'sessions': session_data,
        'count': len(session_data)
    })

if __name__ == '__main__':
    app.run(
        debug=bool(os.getenv('DEBUG', False)),
        host=os.getenv('HOST', '0.0.0.0'),
        port=int(os.getenv('PORT', 5000))
    )